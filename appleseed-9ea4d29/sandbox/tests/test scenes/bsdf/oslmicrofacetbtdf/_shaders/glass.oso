OpenShadingLanguage 1.00
# Compiled by oslc 1.6.2dev
surface glass
param	string	distribution	"specular"		%read{67,78} %write{2147483647,-1}
param	float	roughness	0.025		%read{75,78} %write{2147483647,-1}
param	float	ior	1.5		%read{2,5} %write{2147483647,-1}
global	vector	I	%read{9,57} %write{2147483647,-1}
global	normal	N	%read{9,78} %write{2147483647,-1}
global	closure color	Ci	%read{2147483647,-1} %write{73,80}
local	float	___216_IdotN	%read{50,58} %write{48,48}
local	float	___216_k	%read{54,59} %write{53,53}
local	float	___217_c	%read{10,38} %write{9,12}
local	float	___217_g	%read{24,38} %write{23,26}
local	float	___219_beta	%read{31,39} %write{27,27}
local	float	___219_F	%read{35,43} %write{33,42}
local	vector	___221_R	%read{2147483647,-1} %write{17,17}
local	vector	___221_T	%read{2147483647,-1} %write{56,66}
local	float	from_ior	%read{6,6} %write{2,4}
local	float	to_ior	%read{6,6} %write{3,5}
local	float	eta	%read{19,78} %write{6,6}
local	float	Kr	%read{44,76} %write{43,64}
local	float	Kt	%read{72,79} %write{46,65}
temp	int	$tmp1	%read{1,1} %write{0,0}
temp	int	$tmp2	%read{2147483647,-1} %write{3,3}
const	string	$const1	"path:ray_ior"		%read{3,4} %write{2147483647,-1}
temp	int	$tmp3	%read{2147483647,-1} %write{4,4}
const	string	$const2	"fresnel"		%read{7,8} %write{2147483647,-1}
const	int	$const3	0		%read{10,75} %write{2147483647,-1}
temp	int	$tmp4	%read{11,11} %write{10,10}
const	string	$const4	"reflect"		%read{13,13} %write{2147483647,-1}
temp	float	$tmp5	%read{15,15} %write{14,14}
temp	float	$tmp6	%read{16,16} %write{15,15}
const	float	$const6	2		%read{15,15} %write{2147483647,-1}
temp	vector	$tmp7	%read{17,17} %write{16,16}
const	float	$const7	1		%read{20,64} %write{2147483647,-1}
temp	float	$tmp8	%read{20,20} %write{19,19}
const	string	$const8	"sqr"		%read{18,40} %write{2147483647,-1}
temp	float	$tmp9	%read{21,21} %write{20,20}
temp	float	$tmp10	%read{23,23} %write{21,21}
temp	float	$tmp11	%read{23,23} %write{22,22}
const	float	$const9	0		%read{24,65} %write{2147483647,-1}
temp	int	$tmp12	%read{25,25} %write{24,24}
temp	float	$tmp13	%read{29,29} %write{28,28}
temp	float	$tmp14	%read{30,30} %write{29,29}
temp	float	$tmp15	%read{33,33} %write{30,30}
temp	float	$tmp16	%read{32,32} %write{31,31}
temp	float	$tmp17	%read{33,33} %write{32,32}
const	float	$const10	0.5		%read{37,37} %write{2147483647,-1}
temp	float	$tmp18	%read{36,36} %write{35,35}
temp	float	$tmp19	%read{37,37} %write{36,36}
temp	float	$tmp20	%read{42,42} %write{41,41}
temp	float	$tmp21	%read{39,39} %write{38,38}
temp	float	$tmp22	%read{41,41} %write{39,39}
temp	float	$tmp23	%read{45,45} %write{44,44}
temp	float	$tmp24	%read{46,46} %write{45,45}
const	string	$const11	"refract"		%read{47,47} %write{2147483647,-1}
const	int	$const12	1		%read{78,78} %write{2147483647,-1}
temp	float	$tmp25	%read{52,52} %write{49,49}
temp	float	$tmp26	%read{51,51} %write{50,50}
temp	float	$tmp27	%read{52,52} %write{51,51}
temp	float	$tmp28	%read{53,53} %write{52,52}
temp	int	$tmp29	%read{55,55} %write{54,54}
const	vector	$const13	0 0 0		%read{56,78} %write{2147483647,-1}
temp	vector	$tmp30	%read{62,62} %write{57,57}
temp	float	$tmp31	%read{60,60} %write{58,58}
temp	float	$tmp32	%read{60,60} %write{59,59}
temp	float	$tmp33	%read{61,61} %write{60,60}
temp	vector	$tmp34	%read{62,62} %write{61,61}
const	string	$const14	"specular"		%read{67,67} %write{2147483647,-1}
temp	int	$tmp35	%read{68,68} %write{67,67}
temp	closure color	$tmp36	%read{70,70} %write{69,69}
const	string	$const15	"reflection"		%read{69,69} %write{2147483647,-1}
temp	closure color	$tmp37	%read{73,73} %write{70,70}
temp	closure color	$tmp38	%read{72,72} %write{71,71}
const	string	$const16	"refraction"		%read{71,71} %write{2147483647,-1}
temp	closure color	$tmp39	%read{73,73} %write{72,72}
temp	closure color	$tmp40	%read{76,76} %write{75,75}
const	string	$const17	"microfacet"		%read{74,78} %write{2147483647,-1}
temp	closure color	$tmp42	%read{80,80} %write{76,76}
temp	closure color	$tmp43	%read{79,79} %write{78,78}
temp	closure color	$tmp45	%read{80,80} %write{79,79}
code ___main___
# glass.osl:10
#     if (backfacing())
	backfacing	$tmp1 	%filename{"glass.osl"} %line{10} %argrw{"w"}
	if		$tmp1 4 6 	%argrw{"r"}
# glass.osl:12
#         from_ior = ior;
	assign		from_ior ior 	%line{12} %argrw{"wr"}
# glass.osl:13
#         getattribute("path:ray_ior", to_ior);
	getattribute	$tmp2 $const1 to_ior 	%line{13} %argrw{"wrw"}
# glass.osl:17
#         getattribute("path:ray_ior", from_ior);
	getattribute	$tmp3 $const1 from_ior 	%line{17} %argrw{"wrw"}
# glass.osl:18
#         to_ior = ior;
	assign		to_ior ior 	%line{18} %argrw{"wr"}
# glass.osl:21
#     float eta = from_ior / to_ior;
	div		eta from_ior to_ior 	%line{21} %argrw{"wrr"}
# glass.osl:24
#     fresnel(I, N, eta, Kr, Kt);
	functioncall	$const2 67 	%line{24} %argrw{"r"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:239
#     float g = 1.0 / sqr(eta) - 1.0 + c * c;
	functioncall	$const2 67 	%filename{"/home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h"} %line{239} %argrw{"r"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:211
#     float c = dot(I, N);
	dot		___217_c I N 	%line{211} %argrw{"wrr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:212
#     if (c < 0)
	lt		$tmp4 ___217_c $const3 	%line{212} %argrw{"wrr"}
	if		$tmp4 13 13 	%argrw{"r"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:213
#         c = -c;
	neg		___217_c ___217_c 	%line{213} %argrw{"wr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:214
#     R = reflect(I, N);
	functioncall	$const4 18 	%line{214} %argrw{"r"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:200
# vector reflect (vector I, vector N) { return I - 2*dot(N,I)*N; }
	dot		$tmp5 N I 	%line{200} %argrw{"wrr"}
	mul		$tmp6 $const6 $tmp5 	%argrw{"wrr"}
	mul		$tmp7 $tmp6 N 	%argrw{"wrr"}
	sub		___221_R I $tmp7 	%argrw{"wrr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:215
#     float g = 1.0 / sqr(eta) - 1.0 + c * c;
	functioncall	$const8 20 	%line{215} %argrw{"r"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:210
#     float sqr(float x) { return x*x; }
	mul		$tmp8 eta eta 	%line{210} %argrw{"wrr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:215
#     float g = 1.0 / sqr(eta) - 1.0 + c * c;
	div		$tmp9 $const7 $tmp8 	%line{215} %argrw{"wrr"}
	sub		$tmp10 $tmp9 $const7 	%argrw{"wrr"}
	mul		$tmp11 ___217_c ___217_c 	%argrw{"wrr"}
	add		___217_g $tmp10 $tmp11 	%argrw{"wrr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:216
#     if (g >= 0.0) {
	ge		$tmp12 ___217_g $const9 	%line{216} %argrw{"wrr"}
	if		$tmp12 64 67 	%argrw{"r"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:217
#         g = sqrt (g);
	sqrt		___217_g ___217_g 	%line{217} %argrw{"wr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:218
#         float beta = g - c;
	sub		___219_beta ___217_g ___217_c 	%line{218} %argrw{"wrr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:219
#         float F = (c * (g+c) - 1.0) / (c * beta + 1.0);
	add		$tmp13 ___217_g ___217_c 	%line{219} %argrw{"wrr"}
	mul		$tmp14 ___217_c $tmp13 	%argrw{"wrr"}
	sub		$tmp15 $tmp14 $const7 	%argrw{"wrr"}
	mul		$tmp16 ___217_c ___219_beta 	%argrw{"wrr"}
	add		$tmp17 $tmp16 $const7 	%argrw{"wrr"}
	div		___219_F $tmp15 $tmp17 	%argrw{"wrr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:220
#         F = 0.5 * (1.0 + sqr(F));
	functioncall	$const8 36 	%line{220} %argrw{"r"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:210
#     float sqr(float x) { return x*x; }
	mul		$tmp18 ___219_F ___219_F 	%line{210} %argrw{"wrr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:220
#         F = 0.5 * (1.0 + sqr(F));
	add		$tmp19 $const7 $tmp18 	%line{220} %argrw{"wrr"}
	mul		___219_F $const10 $tmp19 	%argrw{"wrr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:221
#         F *= sqr (beta / (g+c));
	add		$tmp21 ___217_g ___217_c 	%line{221} %argrw{"wrr"}
	div		$tmp22 ___219_beta $tmp21 	%argrw{"wrr"}
	functioncall	$const8 42 	%argrw{"r"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:210
#     float sqr(float x) { return x*x; }
	mul		$tmp20 $tmp22 $tmp22 	%line{210} %argrw{"wrr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:221
#         F *= sqr (beta / (g+c));
	mul		___219_F ___219_F $tmp20 	%line{221} %argrw{"wrr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:222
#         Kr = F;
	assign		Kr ___219_F 	%line{222} %argrw{"wr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:223
#         Kt = (1.0 - Kr) * eta*eta;
	sub		$tmp23 $const7 Kr 	%line{223} %argrw{"wrr"}
	mul		$tmp24 $tmp23 eta 	%argrw{"wrr"}
	mul		Kt $tmp24 eta 	%argrw{"wrr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:226
#         T = refract(I, N, eta);
	functioncall	$const11 64 	%line{226} %argrw{"r"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:202
#     float IdotN = dot (I, N);
	dot		___216_IdotN I N 	%line{202} %argrw{"wrr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:203
#     float k = 1 - eta*eta * (1 - IdotN*IdotN);
	mul		$tmp25 eta eta 	%line{203} %argrw{"wrr"}
	mul		$tmp26 ___216_IdotN ___216_IdotN 	%argrw{"wrr"}
	sub		$tmp27 $const7 $tmp26 	%argrw{"wrr"}
	mul		$tmp28 $tmp25 $tmp27 	%argrw{"wrr"}
	sub		___216_k $const7 $tmp28 	%argrw{"wrr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:204
#     return (k < 0) ? vector(0,0,0) : (eta*I - N * (eta*IdotN + sqrt(k)));
	lt		$tmp29 ___216_k $const3 	%line{204} %argrw{"wrr"}
	if		$tmp29 57 63 	%argrw{"r"}
	assign		___221_T $const13 	%argrw{"wr"}
	mul		$tmp30 eta I 	%argrw{"wrr"}
	mul		$tmp31 eta ___216_IdotN 	%argrw{"wrr"}
	sqrt		$tmp32 ___216_k 	%argrw{"wr"}
	add		$tmp33 $tmp31 $tmp32 	%argrw{"wrr"}
	mul		$tmp34 N $tmp33 	%argrw{"wrr"}
	sub		___221_T $tmp30 $tmp34 	%argrw{"wrr"}
	return
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:229
#         Kr = 1.0;
	assign		Kr $const7 	%line{229} %argrw{"wr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:230
#         Kt = 0.0;
	assign		Kt $const9 	%line{230} %argrw{"wr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:231
#         T = vector (0,0,0);
	assign		___221_T $const13 	%line{231} %argrw{"wr"}
# glass.osl:26
#     if (distribution == "specular")
	eq		$tmp35 distribution $const14 	%filename{"glass.osl"} %line{26} %argrw{"wrr"}
	if		$tmp35 74 81 	%argrw{"r"}
# glass.osl:27
#         Ci = Kr * reflection(N) + Kt * refraction(N, eta);
	closure		$tmp36 $const15 N 	%line{27} %argrw{"wrr"}
	mul		$tmp37 $tmp36 Kr 	%argrw{"wrr"}
	closure		$tmp38 $const16 N eta 	%argrw{"wrrr"}
	mul		$tmp39 $tmp38 Kt 	%argrw{"wrr"}
	add		Ci $tmp37 $tmp39 	%argrw{"wrr"}
# glass.osl:31
#             Kr * microfacet(distribution, N, roughness, eta, 0) +
	functioncall	$const17 76 	%line{31} %argrw{"r"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:524
# closure color as_disney(
	closure		$tmp40 $const17 distribution N $const13 roughness roughness eta $const3 	%filename{"/home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h"} %line{524} %argrw{"wrrrrrrrr"}
# glass.osl:31
#             Kr * microfacet(distribution, N, roughness, eta, 0) +
	mul		$tmp42 $tmp40 Kr 	%filename{"glass.osl"} %line{31} %argrw{"wrr"}
# glass.osl:32
#             Kt * microfacet(distribution, N, roughness, eta, 1);
	functioncall	$const17 79 	%line{32} %argrw{"r"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:524
# 
	closure		$tmp43 $const17 distribution N $const13 roughness roughness eta $const12 	%filename{"/home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h"} %line{524} %argrw{"wrrrrrrrr"}
# glass.osl:32
#             Kt * microfacet(distribution, N, roughness, eta, 1);
	mul		$tmp45 $tmp43 Kt 	%filename{"glass.osl"} %line{32} %argrw{"wrr"}
	add		Ci $tmp42 $tmp45 	%argrw{"wrr"}
	end
